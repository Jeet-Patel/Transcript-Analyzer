version: '3.8'

services:
  backend:
    build: 
      context: .
      dockerfile: backend/Dockerfile
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
      - db

  celery_worker:
    build: 
      context: .
      dockerfile: backend/Dockerfile
    command: celery -A app.celery_worker.celery_app worker --loglevel=info -Q transcript-jobs
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: interview_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
